int natural = 1...
int natural* = 0...

// locks
!lock natural.
!lock natural*.

// Read docs at /docs/builtin.md#integer-add
// ```a + b = c;
// +(a, b) = c;```
: ?+(int, int) -> int.

// Read docs at /docs/builtin.md#integer-subtract
// ```a - b = c;
// -(a, b) = c;```
: ?-(int, int) -> int.

// Multiplication predicate
: ?*(int, int) -> int.

// Integer division predicate
: ?/(int, int) -> int.

// `Greater than` constraint
// can be applied on:
// * `integers`
// * `atoms`
: #>('T', 'T').
!"T:>"=int.

// `Less than` constraint
// can be applied on:
// * `integers`
// * `atoms`
: #<('T', 'T').
!"T:<"=int.

#[int, @]:>(x, y) {__>(x, y)}
#[int, @]:<(x, y) {__>(y, x)}

: #>=('T', 'T').
!"T:>="=int.
#[int, @]:>=(x, y) when x __gte y.

: #<=('T', 'T').
!"T:<="=int.
#[int, @]:<=(x, y) when y >= x.

?+(x, y) -> x __+ y.
?-(y + z, y) -> z.
?*(x, y) -> x __* y.
?/(x * y, y) -> x.

// math `sqrt` predicate
: ?sqrt(int) -> int.
?sqrt(0) -> 0.
?sqrt(1) -> 1.
?sqrt(x) -> __sqrt(x).

// Plus-minus predicate.
// ```x = (-b +- sqrt(D)) / (2 * a)```
: ?+-(int, int) -> int.

?+-(x, y) -> z {
    z = x + y;
}

?+-(x, y) -> z {
    z = x - y;
}

// Integer pow predicate
: ?pow(int, int) -> int.
?pow(x, 0) -> 1.
?pow(x, 1) -> x.

?pow(Value, Pow) -> R {
    Pow > 1;
    R = Value * pow(Value, Pow - 1);
}

// Absolute value predicate
// absolute of -5 = 5
: ?absolute(int) -> int.
?absolute(x) -> x when x __gte 0.
?absolute(x) -> -x when x < 0.

// Integer pow predicate (shortcut to `pow`)
: ?^(int, int) -> int.
?^(v, p) -> pow(v, p).

// Always failing predicate
: ?fail().

// Simple constraint
: #never('T', 'T').
#never(a, b) {
    a = b -> fail();
}

// Message predicate working with stdio
: ?message(string).
?message(m) when __message(m).

// between (boundaries secluded)
: #between(int, int) -> int.
#between(a, b) -> c when c > a, c < b.

// between (boundaries included).
// `x = 0 .. 4`
// `5 = 0 .. 4 -> fail()`
: #..(int, int) -> int.
#..(a, b) -> c when c >= a, c <= b.

cons ~ never.

: ?format(formatting) -> string.
?format(fmt) -> __format(fmt).

: ?-->('T', 'T'[]).
?-->(from, to) when __bag(from, to).

: ?<--('T'[], 'T').
?<--(to, from) when __bag(from, to).

: ?bagof('T') -> 'T'[].
?bagof(from) -> to when __bag(from, to).

: ?sized_bagof(natural, 'T') -> 'T'[].
?sized_bagof(size, from) -> to when
    __bag_sz(from, to, size).

// working with arrays
: ?by_idx('T'[], int) -> 'T',
  ?append('T'[], 'T'[]) -> 'T'[].

?by_idx(arr, idx) -> __by_idx(arr, idx).
?append(arr, tail) -> __append(arr, tail).

// predicate states that there are no 
// nearby standing equal elements in array
: ?no_repeat('T'[]).

?no_repeat([]).
?no_repeat(arr) when length of arr = 1, arr?.

?no_repeat(arr) {
    i > 0;
    len = length of arr;
    len > 1;
    arr?;
    i < len;
    &all i {
        arr[i] never arr[i - 1];
    };
}

// links array head to array tail
// `linked<int>(1, [2,3]) = x`
// `linked<int>(1, tail) = [1,2,3]`
: ?linked('T', 'T'[]) -> 'T'[].

?linked(head, tail) -> arr {
    arr[0] = head;
    append([head], tail) = arr;
}

// flattens array to one dimension
// `flatten<int>([[1,2], [], [3], [4, 5]]) = x`
!ordering.
: ?flatten('T'[]) -> 'T'.

?flatten([]) -> [].
?flatten([x]) -> x.

?flatten(array) -> flattened {
    linked(head, tail) = array;
    flattened = head:append(tail:flatten());
}

: ?in('T', 'T'[]).
?in(x, arr) when
    arr[_] = x.